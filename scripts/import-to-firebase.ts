import { formationCourses } from '../data/courses';
import { sampleQuestions, sampleQuizzes } from '../data/questions';
import { courseService } from '../services/courseService';
import { quizAdminService } from '../services/quizAdminService';
import { Course } from '../types/quiz';

// Type temporaire pour l'import avec des IDs de quiz
type CourseForImport = Omit<Course, 'quizzes'> & {
  quizzes: string[];
};

async function importDataToFirebase(clearExisting: boolean = false) {
  console.log('üöÄ D√©but de l\'importation des donn√©es vers Firebase...');
  console.log('='.repeat(60));

  try {
    // √âTAPE 1: Vider les trois tables si demand√©
    if (clearExisting) {
      console.log('üóëÔ∏è √âTAPE 1: Suppression de toutes les donn√©es existantes...');
      
      // Supprimer tous les cours
      console.log('üìö Suppression des cours...');
      const existingCourses = await courseService.getAllCourses();
      for (const course of existingCourses) {
        await courseService.deleteCourse(course.id);
        console.log(`üóëÔ∏è Cours "${course.title}" supprim√©`);
      }
      console.log(`‚úÖ ${existingCourses.length} cours supprim√©s`);

      // Supprimer tous les quiz
      console.log('üéØ Suppression des quiz...');
      await quizAdminService.deleteAllQuizzes();
      console.log('‚úÖ Tous les quiz supprim√©s');

      // Supprimer toutes les questions
      console.log('üìù Suppression des questions...');
      await quizAdminService.deleteAllQuestions();
      console.log('‚úÖ Toutes les questions supprim√©es');

      console.log('‚úÖ Toutes les tables sont maintenant vides');
      console.log('');
    }

    // √âTAPE 2: Importer les questions
    console.log('üìù √âTAPE 2: Importation des questions...');
    
    // Supprimer les IDs des questions avant l'import et ajouter slug
    const questionsWithoutIds = sampleQuestions.map(question => {
      const { id, ...questionWithoutId } = question;
      return {
        ...questionWithoutId,
        slug: id // Ajouter l'ID original comme slug
      };
    });
    
    const questionIds = await quizAdminService.importQuestionsFromData(questionsWithoutIds);
    console.log(`‚úÖ ${questionIds.length} questions import√©es`);

    // Cr√©er un mapping des anciens IDs vers les nouveaux IDs Firebase
    const questionIdMapping = new Map<string, string>();
    sampleQuestions.forEach((question, index) => {
      if (questionIds[index]) {
        questionIdMapping.set(question.id, questionIds[index]);
        console.log(`üîó Mapping question: ${question.id} ‚Üí ${questionIds[index]}`);
      }
    });
    console.log('');

    // √âTAPE 3: Importer les quiz avec les IDs Firebase des questions
    console.log('üéØ √âTAPE 3: Importation des quiz...');
    
    // Pr√©parer les quiz avec les IDs Firebase des questions
    const quizzesWithQuestionIds = sampleQuizzes.map(quiz => {
      // Trouver les IDs Firebase des questions pour ce quiz
      const firebaseQuestionIds = quiz.questions.map(q => {
        const firebaseId = questionIdMapping.get(q.id);
        if (!firebaseId) {
          console.warn(`‚ö†Ô∏è ID Firebase de question non trouv√© pour: ${q.id} dans le quiz "${quiz.title}"`);
        }
        return firebaseId;
      }).filter(id => id !== undefined) as string[];

      console.log(`üìã Quiz "${quiz.title}": ${firebaseQuestionIds.length} questions mapp√©es sur ${quiz.questions.length} questions originales`);

      // Supprimer l'ID du quiz et ajouter les IDs Firebase des questions + slug
      const { id, ...quizWithoutId } = quiz;
      return {
        ...quizWithoutId,
        slug: id, // Ajouter l'ID original comme slug
        questionIds: firebaseQuestionIds // Utiliser les IDs Firebase des questions
      };
    });

    // Importer les quiz
    const quizIds = await quizAdminService.importQuizzesFromData(quizzesWithQuestionIds);
    console.log(`‚úÖ ${quizIds.length} quiz import√©s`);

    // Cr√©er un mapping des anciens IDs de quiz vers les nouveaux IDs Firebase
    const quizIdMapping = new Map<string, string>();
    sampleQuizzes.forEach((quiz, index) => {
      if (quizIds[index]) {
        quizIdMapping.set(quiz.id, quizIds[index]);
        console.log(`üîó Mapping quiz: ${quiz.id} ‚Üí ${quizIds[index]}`);
      }
    });
    console.log('');

    // √âTAPE 4: Importer les cours avec les IDs Firebase des quiz
    console.log('üìö √âTAPE 4: Importation des cours...');
    
    let coursesCreated = 0;
    for (const course of formationCourses as CourseForImport[]) {
      try {
        // Trouver les IDs Firebase des quiz pour ce cours
        const firebaseQuizIds = course.quizzes.map(quizId => {
          const firebaseId = quizIdMapping.get(quizId);
          if (!firebaseId) {
            console.warn(`‚ö†Ô∏è ID Firebase de quiz non trouv√© pour: ${quizId} dans le cours "${course.title}"`);
          }
          return firebaseId;
        }).filter(id => id !== undefined) as string[];

        console.log(`üìã Cours "${course.title}": ${firebaseQuizIds.length} quiz mapp√©s sur ${course.quizzes.length} quiz originaux`);

        // Cr√©er le cours avec les IDs Firebase des quiz + slug
        const { id, quizzes, ...courseWithoutId } = course;
        const courseId = await courseService.createCourse({ 
          ...courseWithoutId,
          slug: id, // Ajouter l'ID original comme slug
          quizzes: firebaseQuizIds as any // Cast temporaire pour satisfaire le type
        });
        coursesCreated++;
        console.log(`‚úÖ Cours "${course.title}" cr√©√© avec l'ID: ${courseId} (${firebaseQuizIds.length} quiz associ√©s)`);
      } catch (error) {
        console.error(`‚ùå Erreur lors de l'importation du cours "${course.title}":`, error);
      }
    }

    // √âTAPE 5: Afficher les statistiques finales
    console.log('');
    console.log('üìä √âTAPE 5: Statistiques finales...');
    const stats = await quizAdminService.getQuizStatistics();
    console.log('üìà R√©sum√© de l\'importation:');
    console.log(`   - Questions import√©es: ${questionIds.length}`);
    console.log(`   - Quiz import√©s: ${quizIds.length}`);
    console.log(`   - Cours cr√©√©s: ${coursesCreated}`);
    console.log(`   - Questions totales en base: ${stats.totalQuestions}`);
    console.log(`   - Quiz totaux en base: ${stats.totalQuizzes}`);
    console.log(`   - Questions par cat√©gorie:`, stats.questionsByCategory);
    console.log(`   - Questions par difficult√©:`, stats.questionsByDifficulty);
    console.log(`   - Quiz par niveau:`, stats.quizzesByLevel);

    console.log('');
    console.log('üéâ Importation compl√®te termin√©e avec succ√®s !');
    console.log('üìä Toutes les donn√©es sont maintenant √† jour dans Firebase avec les bons mappings d\'IDs');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'importation:', error);
    process.exit(1);
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  // Utiliser clearExisting = true pour vider d'abord toutes les tables
  importDataToFirebase(true);
}

export { importDataToFirebase };

