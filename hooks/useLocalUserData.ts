import { localStorageService, LocalUserData } from '@/services/localStorageService';
import { useCallback, useEffect, useState } from 'react';

export function useLocalUserData() {
  const [userData, setUserData] = useState<LocalUserData | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // Charger les donn√©es utilisateur au d√©marrage
  useEffect(() => {
    loadUserData();
  }, []);

  const loadUserData = useCallback(async () => {
    try {
      setIsLoading(true);
      console.log('üìñ Chargement des donn√©es utilisateur locales...');
      
      // Essayer de charger un utilisateur connect√© d'abord
      let data = await localStorageService.getUserData();
      
      // Si pas d'utilisateur connect√©, essayer un utilisateur anonyme
      if (!data) {
        data = await localStorageService.getAnonymousUser();
      }
      
      setUserData(data);
      console.log('‚úÖ Donn√©es utilisateur locales charg√©es:', data ? data.name : 'Aucune');
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement des donn√©es utilisateur:', error);
      setUserData(null);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Mettre √† jour les points de l'utilisateur
  const updatePoints = useCallback(async (points: number) => {
    try {
      await localStorageService.updateUserPoints(points);
      await loadUserData(); // Recharger les donn√©es
      console.log('‚úÖ Points mis √† jour:', points);
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour des points:', error);
    }
  }, [loadUserData]);

  // Mettre √† jour le niveau de l'utilisateur
  const updateLevel = useCallback(async (level: number) => {
    try {
      await localStorageService.updateUserLevel(level);
      await loadUserData(); // Recharger les donn√©es
      console.log('‚úÖ Niveau mis √† jour:', level);
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour du niveau:', error);
    }
  }, [loadUserData]);

  // Ajouter un quiz compl√©t√©
  const addCompletedQuiz = useCallback(async (quizId: string) => {
    try {
      await localStorageService.addCompletedQuiz(quizId);
      await loadUserData(); // Recharger les donn√©es
      console.log('‚úÖ Quiz compl√©t√© ajout√©:', quizId);
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'ajout du quiz compl√©t√©:', error);
    }
  }, [loadUserData]);

  // Ajouter un badge d√©bloqu√©
  const addUnlockedBadge = useCallback(async (badgeId: string) => {
    try {
      await localStorageService.addUnlockedBadge(badgeId);
      await loadUserData(); // Recharger les donn√©es
      console.log('‚úÖ Badge d√©bloqu√© ajout√©:', badgeId);
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'ajout du badge:', error);
    }
  }, [loadUserData]);

  // Mettre √† jour les pr√©f√©rences
  const updatePreferences = useCallback(async (preferences: Partial<LocalUserData['preferences']>) => {
    try {
      await localStorageService.updatePreferences(preferences);
      await loadUserData(); // Recharger les donn√©es
      console.log('‚úÖ Pr√©f√©rences mises √† jour:', preferences);
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour des pr√©f√©rences:', error);
    }
  }, [loadUserData]);

  // Sauvegarder un utilisateur anonyme
  const saveAnonymousUser = useCallback(async (userData: Partial<LocalUserData>) => {
    try {
      await localStorageService.saveAnonymousUser(userData);
      await loadUserData(); // Recharger les donn√©es
      console.log('‚úÖ Utilisateur anonyme sauvegard√©');
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde de l\'utilisateur anonyme:', error);
    }
  }, [loadUserData]);

  // Sauvegarder un utilisateur connect√©
  const saveUserData = useCallback(async (userData: LocalUserData) => {
    try {
      await localStorageService.saveUserData(userData);
      await loadUserData(); // Recharger les donn√©es
      console.log('‚úÖ Donn√©es utilisateur sauvegard√©es');
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde des donn√©es utilisateur:', error);
    }
  }, [loadUserData]);

  // Migrer les donn√©es anonymes vers un utilisateur connect√©
  const migrateAnonymousToUser = useCallback(async (userId: string, userData: Partial<LocalUserData>) => {
    try {
      await localStorageService.migrateAnonymousToUser(userId, userData);
      await loadUserData(); // Recharger les donn√©es
      console.log('‚úÖ Migration des donn√©es anonymes termin√©e');
    } catch (error) {
      console.error('‚ùå Erreur lors de la migration des donn√©es:', error);
    }
  }, [loadUserData]);

  // Nettoyer toutes les donn√©es
  const clearAllData = useCallback(async () => {
    try {
      await localStorageService.clearAllData();
      setUserData(null);
      console.log('‚úÖ Toutes les donn√©es locales supprim√©es');
    } catch (error) {
      console.error('‚ùå Erreur lors du nettoyage des donn√©es:', error);
    }
  }, []);

  // V√©rifier si l'utilisateur a des donn√©es
  const hasUserData = useCallback(async () => {
    return await localStorageService.hasUserData();
  }, []);

  return {
    userData,
    isLoading,
    loadUserData,
    updatePoints,
    updateLevel,
    addCompletedQuiz,
    addUnlockedBadge,
    updatePreferences,
    saveAnonymousUser,
    saveUserData,
    migrateAnonymousToUser,
    clearAllData,
    hasUserData,
  };
} 